cmake_minimum_required(VERSION 2.6)
PROJECT(intrinsic-noise-analyzer)

#
# Register own CMake extensions:
#
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)


#
# Get default directories under Linux
#
IF(UNIX AND NOT APPLE)
INCLUDE(GNUInstallDirs)
ELSE()
SET(CMAKE_INSTALL_LIBDIR "lib")
ENDIF(UNIX AND NOT APPLE)


#
# Search for libraries
#
FIND_PACKAGE(Qt4 REQUIRED)
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})
INCLUDE_DIRECTORIES(${QT_QTCORE_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR})

FIND_PACKAGE(Ginac REQUIRED)
FIND_PACKAGE(LibSBML REQUIRED)
FIND_PACKAGE(OpenMP REQUIRED)
FIND_PACKAGE(LLVM REQUIRED)


#
# Disable OpenMP on MacOSX.
#
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
SET(OpenMP_CXX_FLAGS "")
SET(OpenMP_C_FLAGS "")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")


#
# Make sure libina can be found
#
LINK_DIRECTORIES(${PROJECT_BINARY_DIR}/lib)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)


#
# Used libaries:
#
set(LIBS ${LIBS} ${GINAC_LIBRARIES} ${LIBSBML_LIBRARIES} m pthread gomp)

#
# Used headers:
#
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIRS} ${GINAC_INCLUDE_DIRS} ${LIBSBML_INCLUDE_DIRS})

#
# Compiler flags:
#
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -Wall -frtti -fexceptions -Wno-unknown-pragmas")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${OpenMP_CXX_FLAGS} -O0 -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS} -O2")

set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS_INIT} ${OpenMP_CXX_FLAGS})
set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS_INIT} ${OpenMP_CXX_FLAGS})
set(CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS_INIT} ${OpenMP_CXX_FLAGS})

# eigen mingw weirdness
IF(WINGW)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mincoming-stack-boundary=2")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -mincoming-stack-boundary=2")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -mincoming-stack-boundary=2")

set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} -mincoming-stack-boundary=2)
set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} -mincoming-stack-boundary=2)
set(CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS} -mincoming-stack-boundary=2)
ENDIF(WINGW)

#
# Define flags, libs etc if LLVM is present:
#
IF(LLVM_FOUND)
MESSAGE(STATUS "LLVM support: yes, version: ${LLVM_VERSION}" )
SET(WITH_EXECUTION_ENGINE_LLVM ON)
SET(LIBS ${LIBS} ${LLVM_LIBRARIES})
INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIRS})
ADD_DEFINITIONS(-D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS_INIT} ${LLVM_LD_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS_INIT} ${LLVM_LD_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS_INIT} ${LLVM_LD_FLAGS}")

# Handle LLVM version:
if((LLVM_VERSION VERSION_GREATER 2.9 OR LLVM_VERSION VERSION_EQUAL 2.9) AND (LLVM_VERSION VERSION_LESS 3.0))
set(INA_LLVM_VERSION_IS_2X ON)
set(INA_LLVM_VERSION_IS_3X OFF)
endif((LLVM_VERSION VERSION_GREATER 2.9 OR LLVM_VERSION VERSION_EQUAL 2.9) AND (LLVM_VERSION VERSION_LESS 3.0))

if(LLVM_VERSION VERSION_GREATER 3.0 OR LLVM_VERSION VERSION_EQUAL 3.0)
set(INA_LLVM_VERSION_IS_2X OFF)
set(INA_LLVM_VERSION_IS_3X ON)
endif(LLVM_VERSION VERSION_GREATER 3.0 OR LLVM_VERSION VERSION_EQUAL 3.0)

else(LLVM_FOUND)
MESSAGE(STATUS "LLVM support: no")
SET(WITH_EXECUTION_ENGINE_LLVM OFF)
ENDIF(LLVM_FOUND)


#
# Generate configuration header file, and ensure, it can be found...
#
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/lib/config.hh.in ${CMAKE_CURRENT_BINARY_DIR}/lib/config.hh)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/lib)


#
# Traverse into source tree:
#
add_subdirectory(lib)
add_subdirectory(app)
add_subdirectory(cli)

#
# Exclude unit tests which rely on glibc which is not available under Windows!
#
IF(NOT WIN32)
    add_subdirectory(test)
ENDIF(NOT WIN32)

#
# Source distribution packages:
#
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "3")
set(CPACK_PACKAGE_VERSION_PATCH "1")
set(CPACK_SOURCE_GENERATOR "TGZ")
set(CPACK_SOURCE_PACKAGE_FILE_NAME
  "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_SOURCE_IGNORE_FILES
  "/build/;/doc/;/dist/;/.git/;/.svn/;~$;${CPACK_SOURCE_IGNORE_FILES}")
include(CPack)


#
# Install logo and .desktop file under Linux:
#
IF(UNIX AND NOT APPLE)
  INSTALL(FILES shared/IntrinsicNoiseAnalyzer.png
          DESTINATION share/icons)
  INSTALL(FILES shared/IntrinsicNoiseAnalyzer.desktop
          DESTINATION share/applications)
ENDIF(UNIX AND NOT APPLE)


